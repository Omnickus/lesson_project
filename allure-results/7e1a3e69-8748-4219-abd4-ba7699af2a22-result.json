{"name": "test_creat_new_allowed_addresses[test_name4-path4-test_data4]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: selenoid/opera:88.0", "trace": "request = <SubRequest 'driver' for <Function test_creat_new_allowed_addresses[test_name4-path4-test_data4]>>\n\n    @pytest.fixture\n    def driver(request):\n        # Сбор параметров запуска для pytest\n        browser = request.config.getoption(\"--browser\")\n        url = request.config.getoption(\"--url\")\n        drivers = request.config.getoption(\"--driver\")\n        executor = request.config.getoption(\"--executor\")\n        version = request.config.getoption(\"--bv\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        videos = request.config.getoption(\"--videos\")\n    \n        #options.add_argument(\"--headless\") ??\n    \n        if executor == None:\n            if browser == \"chrome\":\n                service = ChromiumService(executable_path=drivers + \"chromedriver\")\n                try:\n                    driver = webdriver.Chrome(service=service)\n                except Exception as e:\n                    options = webdriver.ChromeOptions()\n                    driver_path = drivers + \"chromedriver\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            elif browser == \"firefox\":\n                service = FFService(executable_path=drivers + \"geckodriver\")\n                try:\n                    driver = webdriver.Firefox(service=service)\n                except Exception as e:\n                    options = webdriver.FirefoxOptions()\n                    driver_path = drivers + \"geckodriver\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            elif browser == \"Edge\":\n                service = EdgeService(executable_path=drivers + \"edge\")\n                try:\n                    driver = webdriver.Edge(service=service)\n                except Exception as e:\n                    options = webdriver.FirefoxOptions()\n                    driver_path = driver + \"edge\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            else:\n                driver = SafariService()\n        else:\n            executor_url = f\"http://{executor}:4444/wd/hub\"\n            capabilities = {\n                \"browserName\": browser,\n                \"browserVersion\": version,\n                \"selenoid:options\": {\n                    \"enableVNC\": vnc,\n                    \"enableVideo\": videos,\n                    \"enableLog\": logs,\n                    \"acceptInsecureCerts\": True,\n                }\n            }\n>           driver = webdriver.Remote(\n                command_executor=executor_url,\n                desired_capabilities=capabilities,\n            )\n\nconftest.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\nenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcd48344eb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Error response from daemon: No such image: selenoid/opera:88.0\"}}\\n'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: create container: Error response from daemon: No such image: selenoid/opera:88.0\n\nenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:242: SessionNotCreatedException"}, "description": "Создание/Удаление разрешённого адреса", "parameters": [{"name": "test_name", "value": "{'test_name': 'Создание/Редактирование/Удаление разрешённого адресата'}"}, {"name": "path", "value": "{'path': {'path_to_el_but_create': '//*[@id=\"tab-panel-tabpane-whiteList\"]/div/div[1]/div[3]/div/div/span/button', 'path_to_el_but_save': '//*[@id=\"tab-panel-tabpane-whiteList\"]/div/div[2]/div/div/div/table/tbody/tr[2]/td[1]/div/button[1]', 'path_to_el_login': '//*[@id=\"tab-panel-tabpane-whiteList\"]/div/div[2]/div/div/div/table/tbody/tr[2]/td[2]/div/div/input', 'path_to_el_email': '//*[@id=\"tab-panel-tabpane-whiteList\"]/div/div[2]/div/div/div/table/tbody/tr[2]/td[3]/div/div/input'}}"}, {"name": "test_data", "value": "{'test_data': {'login': 'Selen_Goldterror761806', 'email': 'Oghmajurus394401@lind.org', 'test_data_edit': {'login': 'Selen_Felhanadar559614', 'email': 'Brightbrew771631@fahey.info'}}}"}], "start": 1661457976734, "stop": 1661457976734, "uuid": "69ecd303-1064-4236-9d91-32f02a4cb711", "historyId": "a491d8854175acfe3ab317cd15e7b0fb", "testCaseId": "cf6e16fe177467b46eb24ae70770736e", "fullName": "tests.test_allowed_addresses.Test_allowed_addresses#test_creat_new_allowed_addresses", "labels": [{"name": "story", "value": "Создание/Удаление разрешённого адреса"}, {"name": "feature", "value": "Разрешённые адреса"}, {"name": "tag", "value": "allowed_addresses"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_allowed_addresses"}, {"name": "subSuite", "value": "Test_allowed_addresses"}, {"name": "host", "value": "omnic"}, {"name": "thread", "value": "10890-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_allowed_addresses"}]}