{"name": "test_start_services_at_a_time[service1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "request = <SubRequest 'driver' for <Function test_start_services_at_a_time[service1]>>\n\n    @pytest.fixture\n    def driver(request):\n        # Сбор параметров запуска для pytest\n        browser = request.config.getoption(\"--browser\")\n        url = request.config.getoption(\"--url\")\n        drivers = request.config.getoption(\"--driver\")\n        executor = request.config.getoption(\"--executor\")\n        version = request.config.getoption(\"--bv\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        videos = request.config.getoption(\"--videos\")\n    \n        #options.add_argument(\"--headless\") ??\n    \n        if executor == None:\n            if browser == \"chrome\":\n                service = ChromiumService(executable_path=drivers + \"/chromedriver\")\n                try:\n                    driver = webdriver.Chrome(service=service)\n                except Exception as e:\n                    options = webdriver.ChromeOptions()\n                    driver_path = drivers + \"/chrome/chromedriver\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            elif browser == \"firefox\":\n                service = FFService(executable_path=drivers + \"/geckodriver\")\n                try:\n                    driver = webdriver.Firefox(service=service)\n                except Exception as e:\n                    options = webdriver.FirefoxOptions()\n                    driver_path = drivers + \"/geckodriver\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            elif browser == \"Edge\":\n                service = EdgeService(executable_path=drivers + \"/edge\")\n                try:\n                    driver = webdriver.Edge(service=service)\n                except Exception as e:\n                    options = webdriver.FirefoxOptions()\n                    driver_path = driver + \"/edge\"\n                    driver = webdriver.Chrome(\n                                            executable_path = driver_path,\n                                            options = options\n                                        )\n            else:\n                driver = SafariService()\n        else:\n            executor_url = f\"http://{executor}:4444/wd/hub\"\n            capabilities = {\n                \"browserName\": browser,\n                \"browserVersion\": version,\n                \"selenoid:options\": {\n                    \"enableVNC\": vnc,\n                    \"enableVideo\": videos,\n                    \"enableLog\": logs,\n                    \"acceptInsecureCerts\": True,\n                }\n            }\n            driver = webdriver.Remote(\n                command_executor=executor_url,\n                desired_capabilities=capabilities,\n            )\n    \n    \n        def fin():\n            driver.quit()\n        request.addfinalizer(fin)\n    \n        driver.maximize_window()\n    \n        driver.get(url)\n        driver.url = url\n    \n        el = driver.find_element_by_xpath('//*[@id=\"details-button\"]')\n        el.click()\n        el = driver.find_element_by_xpath('//a[@id=\"proceed-link\"]')\n        el.click()\n    \n    \n        el = driver.find_element_by_xpath('//input[@placeholder=\"Логин\"]')\n        el.click()\n        el.send_keys('admin')\n        el = driver.find_element_by_xpath('//input[@placeholder=\"Пароль\"]')\n        el.click()\n        el.send_keys('pass1984')\n        el = driver.find_element_by_xpath('//button[@type=\"submit\"]')\n        el.click()\n>       el = WebDriverWait(driver, 30).until(EC.element_to_be_clickable(( By.XPATH, '//*[@id=\"root\"]/nav[1]/a[1]/img' )))\n\nconftest.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f9a19a9a1771df7de848964aba7e70c0\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x7fe4e2c3f6a0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nenv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException"}, "description": "Запуск сервиса", "parameters": [{"name": "service", "value": "{'start': {'test_name': 'Запуск сервиса Расчёт контрольных сумм', 'path': '//*[@id=\"settings_start_calccrc_button\"]', 'status': 'Сервис успешно запущен'}, 'stop': {'test_name': 'Остановка сервиса Расчёт контрольных сумм', 'path': '//*[@id=\"settings_stop_calccrc_button\"]', 'status': 'Сервис успешно остановлен'}}"}], "start": 1661336718086, "stop": 1661336718086, "uuid": "ec8e6647-1cb0-4465-a288-3f779d0c284d", "historyId": "c8775610a752d137c7a54eeb935252e7", "testCaseId": "7cb06ff0a6e4584421f75361b7dde006", "fullName": "tests.test_service_management.Test_service_management#test_start_services_at_a_time", "labels": [{"name": "feature", "value": "Микросервисы"}, {"name": "story", "value": "Запуск сервиса"}, {"name": "tag", "value": "service_management"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_service_management"}, {"name": "subSuite", "value": "Test_service_management"}, {"name": "host", "value": "qa-workstation-tst"}, {"name": "thread", "value": "171440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_service_management"}]}